var o=Object.defineProperty;var c=(n,t,e)=>t in n?o(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var r=(n,t,e)=>c(n,typeof t!="symbol"?t+"":t,e);import{i as h,x as g}from"./lit-element.js";class a extends h{get _container(){return this.querySelector(".comparison-container")}get _handle(){return this._container.querySelector("[data-handle]")}get _leftImg(){return this._container.querySelector(".left-image")}get _rightImg(){return this._container.querySelector(".right-image")}get _sliderLine(){return this._container.querySelector("[data-slider-line]")}constructor(){super(),this.isDragging=!1,this.startX=0,this.currentPosition=50}connectedCallback(){super.connectedCallback(),this.initPCEvents(),this.initMobileEvents()}firstUpdated(){this.updateClipPath(this.currentPosition),this.updateHandlePosition(this.currentPosition)}initPCEvents(){this._container.addEventListener("mousedown",t=>{this.isDragging=!0,this.startX=t.clientX,this._container.classList.add("dragging"),t.preventDefault()}),this._container.addEventListener("mousemove",t=>{if(!this.isDragging)return;const e=this._container.getBoundingClientRect(),s=t.clientX-e.left,i=Math.max(0,Math.min(100,s/e.width*100));this.updateClipPath(i),this.updateHandlePosition(i),this.currentPosition=i}),this._container.addEventListener("mouseup",()=>{this.isDragging&&(this.isDragging=!1,this._container.classList.remove("dragging"))})}initMobileEvents(){this._container.addEventListener("touchStart",t=>{this.isDragging=!0,this.startX=t.touches[0].clientX,this._container.classList.add("dragging"),t.preventDefault()}),this._container.addEventListener("touchMove",t=>{if(!this.isDragging)return;const e=this._container.getBoundingClientRect(),s=t.touches[0].clientX-e.left,i=Math.max(0,Math.min(100,s/e.width*100));this.updateClipPath(i),this.updateHandlePosition(i),this.currentPosition=i,t.preventDefault()}),this._container.addEventListener("touchend",()=>{this.isDragging&&(this.isDragging=!1,this._container.classList.remove("dragging"))})}updateClipPath(t){this._rightImg.style.clipPath=`polygon(${t}% 0%, 100% 0%, 100% 100%, ${t}% 100%)`}updateHandlePosition(t){this._handle.style.left=`${t}%`,this._sliderLine.style.left=`${t}%`}render(){return g`<slot></slot>`}}r(a,"properties",{isDragging:{type:Boolean,state:!0},startX:{type:Number,state:!0},currentPosition:{type:Number,state:!0}});customElements.define("my-color-comparison-container",a);
